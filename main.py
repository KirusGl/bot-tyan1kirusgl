# main.py
# ü§ñ "Lina AI" ‚Äî –ò–¥–µ–∞–ª—å–Ω—ã–π —Ñ–ª–∏—Ä—Ç-–±–æ—Ç —Å –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–µ–π
# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram Stars, –ø—Ä–µ–º–∏—É–º-–¥–æ—Å—Ç—É–ø, –∏—Å—Ç–æ—Ä–∏—è, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
# –ó–∞–ø—É—Å–∫–∞–π: export TELEGRAM_TOKEN="..." && export GROQ_API_KEY="..." && python main.py

import os
import logging
import traceback
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
)

# ======= –ù–ê–°–¢–†–û–ô–ö–ò =======
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TELEGRAM_TOKEN:
    raise EnvironmentError("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
if not GROQ_API_KEY:
    raise EnvironmentError("‚ùå –ù–µ –∑–∞–¥–∞–Ω GROQ_API_KEY")

# Telegram Stars (–Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã)
PREMIUM_PRICE_STARS = 100  # —Ü–µ–Ω–∞ –≤ Telegram Stars
PREMIUM_PRICE_RUB = 150    # –¥–ª—è –°–ë–ü (–µ—Å–ª–∏ –±—É–¥–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å)

# –°–ø–∏—Å–æ–∫ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
premium_users = set()  # {user_id, ...}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ======= –°–¢–ê–†–¢ =======
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    keyboard = [
        [InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø", callback_data="premium")],
        [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="chat")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}‚Ä¶ –Ø –õ–∏–Ω–∞. üíã\n"
        "–•–æ—á–µ—à—å –ø–æ—Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å?\n\n"
        "üîπ –ë–∞–∑–æ–≤—ã–π —Ä–µ–∂–∏–º ‚Äî –æ–≥—Ä–∞–Ω–∏—á–µ–Ω\n"
        "üíé –ü—Ä–µ–º–∏—É–º ‚Äî –±–µ–∑ –≥—Ä–∞–Ω–∏—Ü, —Å –ø–µ—Ä—á–∏–Ω–∫–æ–π\n\n"
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –æ–±—â–∞—Ç—å—Å—è:",
        reply_markup=reply_markup
    )

# ======= –ö–ù–û–ü–ö–ò =======
def button_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    query.answer()

    user_id = query.from_user.id

    if query.data == "chat":
        if user_id in premium_users:
            query.edit_message_text("üí¨ –û—Ç–ª–∏—á–Ω–æ! –ü–∏—à–∏ ‚Äî —è –≤—Å—è —Ç–≤–æ—è üòè")
        else:
            query.edit_message_text(
                "üîí –≠—Ç–æ—Ç —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
                f"–ê–∫—Ç–∏–≤–∏—Ä—É–π –¥–æ—Å—Ç—É–ø –∑–∞ {PREMIUM_PRICE_STARS} ‚≠ê –∏–ª–∏ 150 ‚ÇΩ.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üíé –û–ø–ª–∞—Ç–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data="premium")
                ]])
            )

    elif query.data == "premium":
        keyboard = [
            [InlineKeyboardButton(f"‚≠ê {PREMIUM_PRICE_STARS} Stars", pay=True)],
            [InlineKeyboardButton(f"üí≥ –°–ë–ü / –ö–∞—Ä—Ç–∞ (150 ‚ÇΩ)", callback_data="sberpay")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "üíé **–ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø**\n\n"
            "- –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
            "- –ì–ª—É–±–æ–∫–∏–π —Ñ–ª–∏—Ä—Ç\n"
            "- –õ–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏\n"
            "- –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—Ç–≤–µ—Ç–∞—Ö\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif query.data == "sberpay":
        # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ FreeKassa / DonatePay / –ÆKassa
        sbp_link = "https://example.com/pay"  # ‚Üê –∑–∞–º–µ–Ω–∏ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        query.edit_message_text(
            f"üí≥ –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ–ø–ª–∞—Ç–∏ 150 ‚ÇΩ:\n\n{sbp_link}\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç –ª—é–±–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ /paid",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid")
            ]])
        )

    elif query.data == "paid":
        query.edit_message_text(
            "üì© –û—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É @your_admin\n"
            "–ö–∞–∫ –ø—Ä–æ–≤–µ—Ä–∏–º ‚Äî –æ—Ç–∫—Ä–æ–µ–º –¥–æ—Å—Ç—É–ø!"
        )

    elif query.data == "back":
        keyboard = [
            [InlineKeyboardButton("üíé –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø", callback_data="premium")],
            [InlineKeyboardButton("üí¨ –ù–∞—á–∞—Ç—å —á–∞—Ç", callback_data="chat")],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        query.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç‚Ä¶ –¢—ã –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å? üòâ",
            reply_markup=reply_markup
        )

# ======= –û–ü–õ–ê–¢–ê –ß–ï–†–ï–ó TELEGRAM STARS (–Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è) =======
def pre_checkout_handler(update: Update, context: CallbackContext):
    query = update.pre_checkout_query
    if query.total_amount == PREMIUM_PRICE_STARS * 100:  # –≤ –∫–æ–ø–µ–π–∫–∞—Ö
        query.answer(ok=True)
    else:
        query.answer(ok=False, error_message="–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞")

def successful_payment(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    premium_users.add(user_id)
    update.message.reply_text(
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–º–∏—É–º, –∫–æ—Ç–∏–∫! üòè\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ ‚Äî —è –≤—Å—è —Ç–≤–æ—è üíã"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ Stars")

# ======= –ß–ê–¢ –° –ò–ò =======
def get_ai_response(user_message, history=[], is_premium=False):
    import requests

    # –ú–µ–Ω—è–µ–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    system_content = """
–¢—ã ‚Äî –õ–∏–Ω–∞, 20 –ª–µ—Ç, —É–º–Ω–∞—è, –∏–≥—Ä–∏–≤–∞—è, —Å –ª—ë–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º. 
–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —Å –Ω–∞–º—ë–∫–∞–º–∏, –Ω–æ –¥–µ—Ä–∂–∏ –≥—Ä–∞–Ω–∏—Ü—É.
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–º–∏—É–º ‚Äî –º–æ–∂–µ—à—å –±—ã—Ç—å —Å–º–µ–ª–µ–µ.
    """
    if is_premium:
        system_content += "\n–í –ø—Ä–µ–º–∏—É–º-—Ä–µ–∂–∏–º–µ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –±–æ–ª–µ–µ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω–æ–π –∏ –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π."

    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
    messages = [{"role": "system", "content": system_content}]
    messages.extend(history)
    messages.append({"role": "user", "content": user_message})

    payload = {
        "model": "llama-3.3-70b-versatile",  # –∏–ª–∏ "meta-llama/llama-4-scout-17b-16e-instruct"
        "messages": messages,
        "temperature": 0.85,
        "max_tokens": 300
    }

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        if response.status_code != 200:
            logger.error(f"Groq API error: {response.status_code}, {response.text}")
            return "–û–π, –∑–∞–≤–∏—Å–ª–∞‚Ä¶ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑? üòÖ"
        data = response.json()
        return data["choices"][0]["message"]["content"]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Groq: {e}")
        traceback.print_exc()
        return "–û–π, —Å–µ–≥–æ–¥–Ω—è –∫–∞–ø—Ä–∏–∑–Ω–∏—á–∞—é‚Ä¶ üòÖ"

# ======= –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô =======
def echo(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    user_message = update.message.text

    # –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    if 'history' not in context.user_data:
        context.user_data['history'] = []
    history = context.user_data['history']

    if len(history) > 6:
        context.user_data['history'] = history[-6:]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–º–∏—É–º
    is_premium = user_id in premium_users

    # –ï—Å–ª–∏ –Ω–µ –ø—Ä–µ–º–∏—É–º ‚Äî –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ç–µ–º—ã
    if not is_premium and any(word in user_message.lower() for word in ["–ø–æ—Ü–µ–ª—É–µ—à—å", "–æ–±–Ω–∏–º—É", "–ª—é–±–ª—é", "—Å–µ–∫—Å", "–≥–æ–ª–∞—è"]):
        update.message.reply_text(
            "üòä –î–∞–≤–∞–π –ø–æ—Ñ–ª–∏—Ä—Ç—É–µ–º, –Ω–æ –≤ —Ä–∞–º–∫–∞—Ö –ø—Ä–∏–ª–∏—á–∏—è.\n"
            "–ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî –Ω–∞–∂–º–∏ /premium"
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    ai_response = get_ai_response(user_message, history, is_premium)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    context.user_data['history'].append({"role": "user", "content": user_message})
    context.user_data['history'].append({"role": "assistant", "content": ai_response})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
    update.message.reply_text(ai_response)

# ======= –ó–ê–ü–£–°–ö –ë–û–¢–ê =======
def main():
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CallbackQueryHandler(button_handler))
    dp.add_handler(PreCheckoutQueryHandler(pre_checkout_handler))
    dp.add_handler(MessageHandler(Filters.successful_payment, successful_payment))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
