# main.py
# ü§ñ –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ "–õ–∏–Ω–∞" ‚Äî AI Flirt Bot
# –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ GitHub Codespaces / Replit
# –ù–µ –∫–æ–ø–∏—Ä—É–π —Ç–æ–∫–µ–Ω—ã –≤ —á–∞—Ç!

import os
import traceback
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext
from telegram import Update
import requests

# ======= –ù–ê–°–¢–†–û–ô–ö–ò (—Ç–æ–ª—å–∫–æ —É —Ç–µ–±—è!) =======
# –ù–µ –∫–æ–ø–∏—Ä—É–π —Å—é–¥–∞ —Ç–æ–∫–µ–Ω—ã! –ó–∞–¥–∞–≤–∞–π —á–µ—Ä–µ–∑ export –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω—ã –∑–∞–¥–∞–Ω—ã
if not TELEGRAM_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN. –ò—Å–ø–æ–ª—å–∑—É–π: export TELEGRAM_TOKEN='—Ç–æ–∫–µ–Ω'")
if not GROQ_API_KEY:
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ –∑–∞–¥–∞–Ω GROQ_API_KEY. –ò—Å–ø–æ–ª—å–∑—É–π: export GROQ_API_KEY='–∫–ª—é—á'")

# ======= GROQ: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò (Llama 3) =======
def get_ai_response(user_message, history=[]):
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {GROQ_API_KEY}",
        "Content-Type": "application/json"
    }
    messages = [
        {"role": "system", "content": """
–¢—ã ‚Äî –õ–∏–Ω–∞, 20 –ª–µ—Ç, —É–º–Ω–∞—è, –∏–≥—Ä–∏–≤–∞—è, —Å –ª—ë–≥–∫–∏–º —Ñ–ª–∏—Ä—Ç–æ–º. 
–¢—ã –æ–±—â–∞–µ—à—å—Å—è –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞, —Å –Ω–∞–º—ë–∫–∞–º–∏, —à—É—Ç–∫–∞–º–∏, –∫–æ–∫–µ—Ç—Å—Ç–≤–æ–º. 
–û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, —Å –ø–µ—Ä—á–∏–Ω–∫–æ–π, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤ –ª–æ–±. 
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –±–æ–ª—å—à–µ ‚Äî –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ.
        """}
    ]
    messages.extend(history)
    messages.append({"role": "user", "content": user_message})

    payload = {
        "model": "llama-3.3-70b-versatile",
        "messages": messages,
        "temperature": 0.8,
        "max_tokens": 256
    }

    try:
        print("üîπ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –≤ Groq...")
        print(f"üîπ –ö–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å: {GROQ_API_KEY[:10]}...")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞
        response = requests.post(url, json=payload, headers=headers, timeout=10)
        print(f"üîπ –°—Ç–∞—Ç—É—Å –∫–æ–¥: {response.status_code}")
        print(f"üîπ –û—Ç–≤–µ—Ç –æ—Ç Groq: {response.text}")

        if response.status_code != 200:
            return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}"

        data = response.json()
        return data["choices"][0]["message"]["content"]

    except Exception as e:
        print("üî¥ –û–®–ò–ë–ö–ê –≤ get_ai_response:")
        traceback.print_exc()
        return f"–û–π, –∑–∞–≤–∏—Å–ª–∞‚Ä¶ –û—à–∏–±–∫–∞: {str(e)}"

# ======= –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–û–ë–©–ï–ù–ò–ô =======
def start(update: Update, context: CallbackContext):
    update.message.reply_text("–ü—Ä–∏–≤–µ—Ç‚Ä¶ –¢—ã –¥–∞–≤–Ω–æ —Ö–æ—Ç–µ–ª –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å? üòâ")

def echo(update: Update, context: CallbackContext):
    user_message = update.message.text
    history = context.user_data.get('history', [])
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if len(history) > 4:
        history = history[-4:]
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
    ai_response = get_ai_response(user_message, history)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
    context.user_data['history'] = history + [
        {"role": "user", "content": user_message},
        {"role": "assistant", "content": ai_response}
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    update.message.reply_text(ai_response)

# ======= –ó–ê–ü–£–°–ö –ë–û–¢–ê =======
def main():
    if not TELEGRAM_TOKEN or not GROQ_API_KEY:
        print("‚ùó –ó–∞–ø—É—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: –Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤")
        return

    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, echo))

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
